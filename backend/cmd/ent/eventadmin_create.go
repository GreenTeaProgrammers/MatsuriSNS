// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/event"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/eventadmin"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/user"
)

// EventAdminCreate is the builder for creating a EventAdmin entity.
type EventAdminCreate struct {
	config
	mutation *EventAdminMutation
	hooks    []Hook
}

// SetEventID sets the "event_id" field.
func (eac *EventAdminCreate) SetEventID(i int) *EventAdminCreate {
	eac.mutation.SetEventID(i)
	return eac
}

// SetUserID sets the "user_id" field.
func (eac *EventAdminCreate) SetUserID(i int) *EventAdminCreate {
	eac.mutation.SetUserID(i)
	return eac
}

// SetCreatedAt sets the "created_at" field.
func (eac *EventAdminCreate) SetCreatedAt(t time.Time) *EventAdminCreate {
	eac.mutation.SetCreatedAt(t)
	return eac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eac *EventAdminCreate) SetNillableCreatedAt(t *time.Time) *EventAdminCreate {
	if t != nil {
		eac.SetCreatedAt(*t)
	}
	return eac
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (eac *EventAdminCreate) SetEventID(id int) *EventAdminCreate {
	eac.mutation.SetEventID(id)
	return eac
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (eac *EventAdminCreate) SetNillableEventID(id *int) *EventAdminCreate {
	if id != nil {
		eac = eac.SetEventID(*id)
	}
	return eac
}

// SetEvent sets the "event" edge to the Event entity.
func (eac *EventAdminCreate) SetEvent(e *Event) *EventAdminCreate {
	return eac.SetEventID(e.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eac *EventAdminCreate) SetUserID(id int) *EventAdminCreate {
	eac.mutation.SetUserID(id)
	return eac
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eac *EventAdminCreate) SetNillableUserID(id *int) *EventAdminCreate {
	if id != nil {
		eac = eac.SetUserID(*id)
	}
	return eac
}

// SetUser sets the "user" edge to the User entity.
func (eac *EventAdminCreate) SetUser(u *User) *EventAdminCreate {
	return eac.SetUserID(u.ID)
}

// Mutation returns the EventAdminMutation object of the builder.
func (eac *EventAdminCreate) Mutation() *EventAdminMutation {
	return eac.mutation
}

// Save creates the EventAdmin in the database.
func (eac *EventAdminCreate) Save(ctx context.Context) (*EventAdmin, error) {
	eac.defaults()
	return withHooks(ctx, eac.sqlSave, eac.mutation, eac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EventAdminCreate) SaveX(ctx context.Context) *EventAdmin {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eac *EventAdminCreate) Exec(ctx context.Context) error {
	_, err := eac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eac *EventAdminCreate) ExecX(ctx context.Context) {
	if err := eac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eac *EventAdminCreate) defaults() {
	if _, ok := eac.mutation.CreatedAt(); !ok {
		v := eventadmin.DefaultCreatedAt()
		eac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eac *EventAdminCreate) check() error {
	if _, ok := eac.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "EventAdmin.event_id"`)}
	}
	if _, ok := eac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "EventAdmin.user_id"`)}
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EventAdmin.created_at"`)}
	}
	return nil
}

func (eac *EventAdminCreate) sqlSave(ctx context.Context) (*EventAdmin, error) {
	if err := eac.check(); err != nil {
		return nil, err
	}
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eac.mutation.id = &_node.ID
	eac.mutation.done = true
	return _node, nil
}

func (eac *EventAdminCreate) createSpec() (*EventAdmin, *sqlgraph.CreateSpec) {
	var (
		_node = &EventAdmin{config: eac.config}
		_spec = sqlgraph.NewCreateSpec(eventadmin.Table, sqlgraph.NewFieldSpec(eventadmin.FieldID, field.TypeInt))
	)
	if value, ok := eac.mutation.EventID(); ok {
		_spec.SetField(eventadmin.FieldEventID, field.TypeInt, value)
		_node.EventID = value
	}
	if value, ok := eac.mutation.UserID(); ok {
		_spec.SetField(eventadmin.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := eac.mutation.CreatedAt(); ok {
		_spec.SetField(eventadmin.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := eac.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.EventTable,
			Columns: []string{eventadmin.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_event_admins = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.UserTable,
			Columns: []string{eventadmin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_event_admins = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventAdminCreateBulk is the builder for creating many EventAdmin entities in bulk.
type EventAdminCreateBulk struct {
	config
	err      error
	builders []*EventAdminCreate
}

// Save creates the EventAdmin entities in the database.
func (eacb *EventAdminCreateBulk) Save(ctx context.Context) ([]*EventAdmin, error) {
	if eacb.err != nil {
		return nil, eacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EventAdmin, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventAdminMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EventAdminCreateBulk) SaveX(ctx context.Context) []*EventAdmin {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eacb *EventAdminCreateBulk) Exec(ctx context.Context) error {
	_, err := eacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eacb *EventAdminCreateBulk) ExecX(ctx context.Context) {
	if err := eacb.Exec(ctx); err != nil {
		panic(err)
	}
}
