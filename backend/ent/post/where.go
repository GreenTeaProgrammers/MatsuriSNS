// Code generated by ent, DO NOT EDIT.

package post

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldComment, v))
}

// LocationX applies equality check predicate on the "location_x" field. It's identical to LocationXEQ.
func LocationX(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLocationX, v))
}

// LocationY applies equality check predicate on the "location_y" field. It's identical to LocationYEQ.
func LocationY(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLocationY, v))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldVideoURL, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldComment, v))
}

// LocationXEQ applies the EQ predicate on the "location_x" field.
func LocationXEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLocationX, v))
}

// LocationXNEQ applies the NEQ predicate on the "location_x" field.
func LocationXNEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldLocationX, v))
}

// LocationXIn applies the In predicate on the "location_x" field.
func LocationXIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldLocationX, vs...))
}

// LocationXNotIn applies the NotIn predicate on the "location_x" field.
func LocationXNotIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldLocationX, vs...))
}

// LocationXGT applies the GT predicate on the "location_x" field.
func LocationXGT(v float64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldLocationX, v))
}

// LocationXGTE applies the GTE predicate on the "location_x" field.
func LocationXGTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldLocationX, v))
}

// LocationXLT applies the LT predicate on the "location_x" field.
func LocationXLT(v float64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldLocationX, v))
}

// LocationXLTE applies the LTE predicate on the "location_x" field.
func LocationXLTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldLocationX, v))
}

// LocationYEQ applies the EQ predicate on the "location_y" field.
func LocationYEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLocationY, v))
}

// LocationYNEQ applies the NEQ predicate on the "location_y" field.
func LocationYNEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldLocationY, v))
}

// LocationYIn applies the In predicate on the "location_y" field.
func LocationYIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldLocationY, vs...))
}

// LocationYNotIn applies the NotIn predicate on the "location_y" field.
func LocationYNotIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldLocationY, vs...))
}

// LocationYGT applies the GT predicate on the "location_y" field.
func LocationYGT(v float64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldLocationY, v))
}

// LocationYGTE applies the GTE predicate on the "location_y" field.
func LocationYGTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldLocationY, v))
}

// LocationYLT applies the LT predicate on the "location_y" field.
func LocationYLT(v float64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldLocationY, v))
}

// LocationYLTE applies the LTE predicate on the "location_y" field.
func LocationYLTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldLocationY, v))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLIsNil applies the IsNil predicate on the "video_url" field.
func VideoURLIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldVideoURL))
}

// VideoURLNotNil applies the NotNil predicate on the "video_url" field.
func VideoURLNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldVideoURL))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldVideoURL, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EventTable, EventPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.PostImage) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReports applies the HasEdge predicate on the "reports" edge.
func HasReports() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReportsTable, ReportsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportsWith applies the HasEdge predicate on the "reports" edge with a given conditions (other predicates).
func HasReportsWith(preds ...predicate.Report) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newReportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
