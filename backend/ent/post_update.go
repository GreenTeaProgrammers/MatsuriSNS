// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/event"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/post"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/postimage"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/predicate"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/user"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetComment sets the "comment" field.
func (pu *PostUpdate) SetComment(s string) *PostUpdate {
	pu.mutation.SetComment(s)
	return pu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pu *PostUpdate) SetNillableComment(s *string) *PostUpdate {
	if s != nil {
		pu.SetComment(*s)
	}
	return pu
}

// SetLocationX sets the "location_x" field.
func (pu *PostUpdate) SetLocationX(f float64) *PostUpdate {
	pu.mutation.ResetLocationX()
	pu.mutation.SetLocationX(f)
	return pu
}

// SetNillableLocationX sets the "location_x" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLocationX(f *float64) *PostUpdate {
	if f != nil {
		pu.SetLocationX(*f)
	}
	return pu
}

// AddLocationX adds f to the "location_x" field.
func (pu *PostUpdate) AddLocationX(f float64) *PostUpdate {
	pu.mutation.AddLocationX(f)
	return pu
}

// SetLocationY sets the "location_y" field.
func (pu *PostUpdate) SetLocationY(f float64) *PostUpdate {
	pu.mutation.ResetLocationY()
	pu.mutation.SetLocationY(f)
	return pu
}

// SetNillableLocationY sets the "location_y" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLocationY(f *float64) *PostUpdate {
	if f != nil {
		pu.SetLocationY(*f)
	}
	return pu
}

// AddLocationY adds f to the "location_y" field.
func (pu *PostUpdate) AddLocationY(f float64) *PostUpdate {
	pu.mutation.AddLocationY(f)
	return pu
}

// SetVideoURL sets the "video_url" field.
func (pu *PostUpdate) SetVideoURL(s string) *PostUpdate {
	pu.mutation.SetVideoURL(s)
	return pu
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (pu *PostUpdate) SetNillableVideoURL(s *string) *PostUpdate {
	if s != nil {
		pu.SetVideoURL(*s)
	}
	return pu
}

// ClearVideoURL clears the value of the "video_url" field.
func (pu *PostUpdate) ClearVideoURL() *PostUpdate {
	pu.mutation.ClearVideoURL()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PostUpdate) SetCreatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreatedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (pu *PostUpdate) AddUserIDs(ids ...int) *PostUpdate {
	pu.mutation.AddUserIDs(ids...)
	return pu
}

// AddUser adds the "user" edges to the User entity.
func (pu *PostUpdate) AddUser(u ...*User) *PostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserIDs(ids...)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (pu *PostUpdate) AddEventIDs(ids ...int) *PostUpdate {
	pu.mutation.AddEventIDs(ids...)
	return pu
}

// AddEvent adds the "event" edges to the Event entity.
func (pu *PostUpdate) AddEvent(e ...*Event) *PostUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEventIDs(ids...)
}

// AddImageIDs adds the "images" edge to the PostImage entity by IDs.
func (pu *PostUpdate) AddImageIDs(ids ...int) *PostUpdate {
	pu.mutation.AddImageIDs(ids...)
	return pu
}

// AddImages adds the "images" edges to the PostImage entity.
func (pu *PostUpdate) AddImages(p ...*PostImage) *PostUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddImageIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (pu *PostUpdate) ClearUser() *PostUpdate {
	pu.mutation.ClearUser()
	return pu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (pu *PostUpdate) RemoveUserIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveUserIDs(ids...)
	return pu
}

// RemoveUser removes "user" edges to User entities.
func (pu *PostUpdate) RemoveUser(u ...*User) *PostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserIDs(ids...)
}

// ClearEvent clears all "event" edges to the Event entity.
func (pu *PostUpdate) ClearEvent() *PostUpdate {
	pu.mutation.ClearEvent()
	return pu
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (pu *PostUpdate) RemoveEventIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveEventIDs(ids...)
	return pu
}

// RemoveEvent removes "event" edges to Event entities.
func (pu *PostUpdate) RemoveEvent(e ...*Event) *PostUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEventIDs(ids...)
}

// ClearImages clears all "images" edges to the PostImage entity.
func (pu *PostUpdate) ClearImages() *PostUpdate {
	pu.mutation.ClearImages()
	return pu
}

// RemoveImageIDs removes the "images" edge to PostImage entities by IDs.
func (pu *PostUpdate) RemoveImageIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveImageIDs(ids...)
	return pu
}

// RemoveImages removes "images" edges to PostImage entities.
func (pu *PostUpdate) RemoveImages(p ...*PostImage) *PostUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Comment(); ok {
		if err := post.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Post.comment": %w`, err)}
		}
	}
	return nil
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Comment(); ok {
		_spec.SetField(post.FieldComment, field.TypeString, value)
	}
	if value, ok := pu.mutation.LocationX(); ok {
		_spec.SetField(post.FieldLocationX, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedLocationX(); ok {
		_spec.AddField(post.FieldLocationX, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.LocationY(); ok {
		_spec.SetField(post.FieldLocationY, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedLocationY(); ok {
		_spec.AddField(post.FieldLocationY, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.VideoURL(); ok {
		_spec.SetField(post.FieldVideoURL, field.TypeString, value)
	}
	if pu.mutation.VideoURLCleared() {
		_spec.ClearField(post.FieldVideoURL, field.TypeString)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.UserTable,
			Columns: post.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUserIDs(); len(nodes) > 0 && !pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.UserTable,
			Columns: post.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.UserTable,
			Columns: post.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.EventTable,
			Columns: post.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEventIDs(); len(nodes) > 0 && !pu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.EventTable,
			Columns: post.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.EventTable,
			Columns: post.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ImagesTable,
			Columns: []string{post.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ImagesTable,
			Columns: []string{post.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ImagesTable,
			Columns: []string{post.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetComment sets the "comment" field.
func (puo *PostUpdateOne) SetComment(s string) *PostUpdateOne {
	puo.mutation.SetComment(s)
	return puo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableComment(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetComment(*s)
	}
	return puo
}

// SetLocationX sets the "location_x" field.
func (puo *PostUpdateOne) SetLocationX(f float64) *PostUpdateOne {
	puo.mutation.ResetLocationX()
	puo.mutation.SetLocationX(f)
	return puo
}

// SetNillableLocationX sets the "location_x" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLocationX(f *float64) *PostUpdateOne {
	if f != nil {
		puo.SetLocationX(*f)
	}
	return puo
}

// AddLocationX adds f to the "location_x" field.
func (puo *PostUpdateOne) AddLocationX(f float64) *PostUpdateOne {
	puo.mutation.AddLocationX(f)
	return puo
}

// SetLocationY sets the "location_y" field.
func (puo *PostUpdateOne) SetLocationY(f float64) *PostUpdateOne {
	puo.mutation.ResetLocationY()
	puo.mutation.SetLocationY(f)
	return puo
}

// SetNillableLocationY sets the "location_y" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLocationY(f *float64) *PostUpdateOne {
	if f != nil {
		puo.SetLocationY(*f)
	}
	return puo
}

// AddLocationY adds f to the "location_y" field.
func (puo *PostUpdateOne) AddLocationY(f float64) *PostUpdateOne {
	puo.mutation.AddLocationY(f)
	return puo
}

// SetVideoURL sets the "video_url" field.
func (puo *PostUpdateOne) SetVideoURL(s string) *PostUpdateOne {
	puo.mutation.SetVideoURL(s)
	return puo
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableVideoURL(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetVideoURL(*s)
	}
	return puo
}

// ClearVideoURL clears the value of the "video_url" field.
func (puo *PostUpdateOne) ClearVideoURL() *PostUpdateOne {
	puo.mutation.ClearVideoURL()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PostUpdateOne) SetCreatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreatedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (puo *PostUpdateOne) AddUserIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddUserIDs(ids...)
	return puo
}

// AddUser adds the "user" edges to the User entity.
func (puo *PostUpdateOne) AddUser(u ...*User) *PostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserIDs(ids...)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (puo *PostUpdateOne) AddEventIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddEventIDs(ids...)
	return puo
}

// AddEvent adds the "event" edges to the Event entity.
func (puo *PostUpdateOne) AddEvent(e ...*Event) *PostUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEventIDs(ids...)
}

// AddImageIDs adds the "images" edge to the PostImage entity by IDs.
func (puo *PostUpdateOne) AddImageIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddImageIDs(ids...)
	return puo
}

// AddImages adds the "images" edges to the PostImage entity.
func (puo *PostUpdateOne) AddImages(p ...*PostImage) *PostUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddImageIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (puo *PostUpdateOne) ClearUser() *PostUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (puo *PostUpdateOne) RemoveUserIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveUserIDs(ids...)
	return puo
}

// RemoveUser removes "user" edges to User entities.
func (puo *PostUpdateOne) RemoveUser(u ...*User) *PostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserIDs(ids...)
}

// ClearEvent clears all "event" edges to the Event entity.
func (puo *PostUpdateOne) ClearEvent() *PostUpdateOne {
	puo.mutation.ClearEvent()
	return puo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (puo *PostUpdateOne) RemoveEventIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveEventIDs(ids...)
	return puo
}

// RemoveEvent removes "event" edges to Event entities.
func (puo *PostUpdateOne) RemoveEvent(e ...*Event) *PostUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEventIDs(ids...)
}

// ClearImages clears all "images" edges to the PostImage entity.
func (puo *PostUpdateOne) ClearImages() *PostUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// RemoveImageIDs removes the "images" edge to PostImage entities by IDs.
func (puo *PostUpdateOne) RemoveImageIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveImageIDs(ids...)
	return puo
}

// RemoveImages removes "images" edges to PostImage entities.
func (puo *PostUpdateOne) RemoveImages(p ...*PostImage) *PostUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Comment(); ok {
		if err := post.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Post.comment": %w`, err)}
		}
	}
	return nil
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Comment(); ok {
		_spec.SetField(post.FieldComment, field.TypeString, value)
	}
	if value, ok := puo.mutation.LocationX(); ok {
		_spec.SetField(post.FieldLocationX, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedLocationX(); ok {
		_spec.AddField(post.FieldLocationX, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.LocationY(); ok {
		_spec.SetField(post.FieldLocationY, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedLocationY(); ok {
		_spec.AddField(post.FieldLocationY, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.VideoURL(); ok {
		_spec.SetField(post.FieldVideoURL, field.TypeString, value)
	}
	if puo.mutation.VideoURLCleared() {
		_spec.ClearField(post.FieldVideoURL, field.TypeString)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.UserTable,
			Columns: post.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUserIDs(); len(nodes) > 0 && !puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.UserTable,
			Columns: post.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.UserTable,
			Columns: post.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.EventTable,
			Columns: post.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEventIDs(); len(nodes) > 0 && !puo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.EventTable,
			Columns: post.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   post.EventTable,
			Columns: post.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ImagesTable,
			Columns: []string{post.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ImagesTable,
			Columns: []string{post.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.ImagesTable,
			Columns: []string{post.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
