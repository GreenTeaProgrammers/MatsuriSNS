// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/post"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// LocationX holds the value of the "location_x" field.
	LocationX float64 `json:"location_x,omitempty"`
	// LocationY holds the value of the "location_y" field.
	LocationY float64 `json:"location_y,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges        PostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Event holds the value of the event edge.
	Event []*Event `json:"event,omitempty"`
	// Images holds the value of the images edge.
	Images []*PostImage `json:"images,omitempty"`
	// Reports holds the value of the reports edge.
	Reports []*Report `json:"reports,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) EventOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) ImagesOrErr() ([]*PostImage, error) {
	if e.loadedTypes[2] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// ReportsOrErr returns the Reports value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) ReportsOrErr() ([]*Report, error) {
	if e.loadedTypes[3] {
		return e.Reports, nil
	}
	return nil, &NotLoadedError{edge: "reports"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldLocationX, post.FieldLocationY:
			values[i] = new(sql.NullFloat64)
		case post.FieldID:
			values[i] = new(sql.NullInt64)
		case post.FieldComment, post.FieldVideoURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case post.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				po.Comment = value.String
			}
		case post.FieldLocationX:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field location_x", values[i])
			} else if value.Valid {
				po.LocationX = value.Float64
			}
		case post.FieldLocationY:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field location_y", values[i])
			} else if value.Valid {
				po.LocationY = value.Float64
			}
		case post.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				po.VideoURL = value.String
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Post.
// This includes values selected through modifiers, order, etc.
func (po *Post) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Post entity.
func (po *Post) QueryUser() *UserQuery {
	return NewPostClient(po.config).QueryUser(po)
}

// QueryEvent queries the "event" edge of the Post entity.
func (po *Post) QueryEvent() *EventQuery {
	return NewPostClient(po.config).QueryEvent(po)
}

// QueryImages queries the "images" edge of the Post entity.
func (po *Post) QueryImages() *PostImageQuery {
	return NewPostClient(po.config).QueryImages(po)
}

// QueryReports queries the "reports" edge of the Post entity.
func (po *Post) QueryReports() *ReportQuery {
	return NewPostClient(po.config).QueryReports(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return NewPostClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("comment=")
	builder.WriteString(po.Comment)
	builder.WriteString(", ")
	builder.WriteString("location_x=")
	builder.WriteString(fmt.Sprintf("%v", po.LocationX))
	builder.WriteString(", ")
	builder.WriteString("location_y=")
	builder.WriteString(fmt.Sprintf("%v", po.LocationY))
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(po.VideoURL)
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post
