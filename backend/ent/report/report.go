// Code generated by ent, DO NOT EDIT.

package report

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the report type in the database.
	Label = "report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// EdgeReportedBy holds the string denoting the reported_by edge name in mutations.
	EdgeReportedBy = "reported_by"
	// Table holds the table name of the report in the database.
	Table = "reports"
	// PostTable is the table that holds the post relation/edge. The primary key declared below.
	PostTable = "post_reports"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// ReportedByTable is the table that holds the reported_by relation/edge. The primary key declared below.
	ReportedByTable = "user_reports"
	// ReportedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReportedByInverseTable = "users"
)

// Columns holds all SQL columns for report fields.
var Columns = []string{
	FieldID,
	FieldReason,
}

var (
	// PostPrimaryKey and PostColumn2 are the table columns denoting the
	// primary key for the post relation (M2M).
	PostPrimaryKey = []string{"post_id", "report_id"}
	// ReportedByPrimaryKey and ReportedByColumn2 are the table columns denoting the
	// primary key for the reported_by relation (M2M).
	ReportedByPrimaryKey = []string{"user_id", "report_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	ReasonValidator func(string) error
)

// OrderOption defines the ordering options for the Report queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByPostCount orders the results by post count.
func ByPostCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostStep(), opts...)
	}
}

// ByPost orders the results by post terms.
func ByPost(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReportedByCount orders the results by reported_by count.
func ByReportedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReportedByStep(), opts...)
	}
}

// ByReportedBy orders the results by reported_by terms.
func ByReportedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReportedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PostTable, PostPrimaryKey...),
	)
}
func newReportedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReportedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReportedByTable, ReportedByPrimaryKey...),
	)
}
