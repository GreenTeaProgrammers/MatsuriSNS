// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/event"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/eventadmin"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/user"
)

// EventAdmin is the model entity for the EventAdmin schema.
type EventAdmin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventAdminQuery when eager-loading is set.
	Edges              EventAdminEdges `json:"edges"`
	event_event_admins *int
	user_event_admins  *int
	selectValues       sql.SelectValues
}

// EventAdminEdges holds the relations/edges for other nodes in the graph.
type EventAdminEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventAdminEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventAdminEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventAdmin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventadmin.FieldID:
			values[i] = new(sql.NullInt64)
		case eventadmin.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case eventadmin.ForeignKeys[0]: // event_event_admins
			values[i] = new(sql.NullInt64)
		case eventadmin.ForeignKeys[1]: // user_event_admins
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventAdmin fields.
func (ea *EventAdmin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventadmin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case eventadmin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case eventadmin.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_event_admins", value)
			} else if value.Valid {
				ea.event_event_admins = new(int)
				*ea.event_event_admins = int(value.Int64)
			}
		case eventadmin.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_event_admins", value)
			} else if value.Valid {
				ea.user_event_admins = new(int)
				*ea.user_event_admins = int(value.Int64)
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventAdmin.
// This includes values selected through modifiers, order, etc.
func (ea *EventAdmin) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventAdmin entity.
func (ea *EventAdmin) QueryEvent() *EventQuery {
	return NewEventAdminClient(ea.config).QueryEvent(ea)
}

// QueryUser queries the "user" edge of the EventAdmin entity.
func (ea *EventAdmin) QueryUser() *UserQuery {
	return NewEventAdminClient(ea.config).QueryUser(ea)
}

// Update returns a builder for updating this EventAdmin.
// Note that you need to call EventAdmin.Unwrap() before calling this method if this EventAdmin
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EventAdmin) Update() *EventAdminUpdateOne {
	return NewEventAdminClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EventAdmin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EventAdmin) Unwrap() *EventAdmin {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventAdmin is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EventAdmin) String() string {
	var builder strings.Builder
	builder.WriteString("EventAdmin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EventAdmins is a parsable slice of EventAdmin.
type EventAdmins []*EventAdmin
