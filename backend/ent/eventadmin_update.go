// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/event"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/eventadmin"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/predicate"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/user"
)

// EventAdminUpdate is the builder for updating EventAdmin entities.
type EventAdminUpdate struct {
	config
	hooks    []Hook
	mutation *EventAdminMutation
}

// Where appends a list predicates to the EventAdminUpdate builder.
func (eau *EventAdminUpdate) Where(ps ...predicate.EventAdmin) *EventAdminUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetCreatedAt sets the "created_at" field.
func (eau *EventAdminUpdate) SetCreatedAt(t time.Time) *EventAdminUpdate {
	eau.mutation.SetCreatedAt(t)
	return eau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eau *EventAdminUpdate) SetNillableCreatedAt(t *time.Time) *EventAdminUpdate {
	if t != nil {
		eau.SetCreatedAt(*t)
	}
	return eau
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (eau *EventAdminUpdate) SetEventID(id int) *EventAdminUpdate {
	eau.mutation.SetEventID(id)
	return eau
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (eau *EventAdminUpdate) SetNillableEventID(id *int) *EventAdminUpdate {
	if id != nil {
		eau = eau.SetEventID(*id)
	}
	return eau
}

// SetEvent sets the "event" edge to the Event entity.
func (eau *EventAdminUpdate) SetEvent(e *Event) *EventAdminUpdate {
	return eau.SetEventID(e.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eau *EventAdminUpdate) SetUserID(id int) *EventAdminUpdate {
	eau.mutation.SetUserID(id)
	return eau
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eau *EventAdminUpdate) SetNillableUserID(id *int) *EventAdminUpdate {
	if id != nil {
		eau = eau.SetUserID(*id)
	}
	return eau
}

// SetUser sets the "user" edge to the User entity.
func (eau *EventAdminUpdate) SetUser(u *User) *EventAdminUpdate {
	return eau.SetUserID(u.ID)
}

// Mutation returns the EventAdminMutation object of the builder.
func (eau *EventAdminUpdate) Mutation() *EventAdminMutation {
	return eau.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (eau *EventAdminUpdate) ClearEvent() *EventAdminUpdate {
	eau.mutation.ClearEvent()
	return eau
}

// ClearUser clears the "user" edge to the User entity.
func (eau *EventAdminUpdate) ClearUser() *EventAdminUpdate {
	eau.mutation.ClearUser()
	return eau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EventAdminUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EventAdminUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EventAdminUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EventAdminUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eau *EventAdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventadmin.Table, eventadmin.Columns, sqlgraph.NewFieldSpec(eventadmin.FieldID, field.TypeInt))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.CreatedAt(); ok {
		_spec.SetField(eventadmin.FieldCreatedAt, field.TypeTime, value)
	}
	if eau.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.EventTable,
			Columns: []string{eventadmin.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.EventTable,
			Columns: []string{eventadmin.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.UserTable,
			Columns: []string{eventadmin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.UserTable,
			Columns: []string{eventadmin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventadmin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// EventAdminUpdateOne is the builder for updating a single EventAdmin entity.
type EventAdminUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventAdminMutation
}

// SetCreatedAt sets the "created_at" field.
func (eauo *EventAdminUpdateOne) SetCreatedAt(t time.Time) *EventAdminUpdateOne {
	eauo.mutation.SetCreatedAt(t)
	return eauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eauo *EventAdminUpdateOne) SetNillableCreatedAt(t *time.Time) *EventAdminUpdateOne {
	if t != nil {
		eauo.SetCreatedAt(*t)
	}
	return eauo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (eauo *EventAdminUpdateOne) SetEventID(id int) *EventAdminUpdateOne {
	eauo.mutation.SetEventID(id)
	return eauo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (eauo *EventAdminUpdateOne) SetNillableEventID(id *int) *EventAdminUpdateOne {
	if id != nil {
		eauo = eauo.SetEventID(*id)
	}
	return eauo
}

// SetEvent sets the "event" edge to the Event entity.
func (eauo *EventAdminUpdateOne) SetEvent(e *Event) *EventAdminUpdateOne {
	return eauo.SetEventID(e.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eauo *EventAdminUpdateOne) SetUserID(id int) *EventAdminUpdateOne {
	eauo.mutation.SetUserID(id)
	return eauo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eauo *EventAdminUpdateOne) SetNillableUserID(id *int) *EventAdminUpdateOne {
	if id != nil {
		eauo = eauo.SetUserID(*id)
	}
	return eauo
}

// SetUser sets the "user" edge to the User entity.
func (eauo *EventAdminUpdateOne) SetUser(u *User) *EventAdminUpdateOne {
	return eauo.SetUserID(u.ID)
}

// Mutation returns the EventAdminMutation object of the builder.
func (eauo *EventAdminUpdateOne) Mutation() *EventAdminMutation {
	return eauo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (eauo *EventAdminUpdateOne) ClearEvent() *EventAdminUpdateOne {
	eauo.mutation.ClearEvent()
	return eauo
}

// ClearUser clears the "user" edge to the User entity.
func (eauo *EventAdminUpdateOne) ClearUser() *EventAdminUpdateOne {
	eauo.mutation.ClearUser()
	return eauo
}

// Where appends a list predicates to the EventAdminUpdate builder.
func (eauo *EventAdminUpdateOne) Where(ps ...predicate.EventAdmin) *EventAdminUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EventAdminUpdateOne) Select(field string, fields ...string) *EventAdminUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EventAdmin entity.
func (eauo *EventAdminUpdateOne) Save(ctx context.Context) (*EventAdmin, error) {
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EventAdminUpdateOne) SaveX(ctx context.Context) *EventAdmin {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EventAdminUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EventAdminUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eauo *EventAdminUpdateOne) sqlSave(ctx context.Context) (_node *EventAdmin, err error) {
	_spec := sqlgraph.NewUpdateSpec(eventadmin.Table, eventadmin.Columns, sqlgraph.NewFieldSpec(eventadmin.FieldID, field.TypeInt))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventAdmin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventadmin.FieldID)
		for _, f := range fields {
			if !eventadmin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventadmin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.CreatedAt(); ok {
		_spec.SetField(eventadmin.FieldCreatedAt, field.TypeTime, value)
	}
	if eauo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.EventTable,
			Columns: []string{eventadmin.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.EventTable,
			Columns: []string{eventadmin.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.UserTable,
			Columns: []string{eventadmin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eventadmin.UserTable,
			Columns: []string{eventadmin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventAdmin{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventadmin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}
