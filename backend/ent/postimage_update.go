// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/post"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/postimage"
	"github.com/GreenTeaProgrammers/MatsuriSNS/ent/predicate"
)

// PostImageUpdate is the builder for updating PostImage entities.
type PostImageUpdate struct {
	config
	hooks    []Hook
	mutation *PostImageMutation
}

// Where appends a list predicates to the PostImageUpdate builder.
func (piu *PostImageUpdate) Where(ps ...predicate.PostImage) *PostImageUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetPostID sets the "post_id" field.
func (piu *PostImageUpdate) SetPostID(i int) *PostImageUpdate {
	piu.mutation.SetPostID(i)
	return piu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (piu *PostImageUpdate) SetNillablePostID(i *int) *PostImageUpdate {
	if i != nil {
		piu.SetPostID(*i)
	}
	return piu
}

// SetImageURL sets the "image_url" field.
func (piu *PostImageUpdate) SetImageURL(s string) *PostImageUpdate {
	piu.mutation.SetImageURL(s)
	return piu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piu *PostImageUpdate) SetNillableImageURL(s *string) *PostImageUpdate {
	if s != nil {
		piu.SetImageURL(*s)
	}
	return piu
}

// SetCreatedAt sets the "created_at" field.
func (piu *PostImageUpdate) SetCreatedAt(t time.Time) *PostImageUpdate {
	piu.mutation.SetCreatedAt(t)
	return piu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piu *PostImageUpdate) SetNillableCreatedAt(t *time.Time) *PostImageUpdate {
	if t != nil {
		piu.SetCreatedAt(*t)
	}
	return piu
}

// SetPost sets the "post" edge to the Post entity.
func (piu *PostImageUpdate) SetPost(p *Post) *PostImageUpdate {
	return piu.SetPostID(p.ID)
}

// Mutation returns the PostImageMutation object of the builder.
func (piu *PostImageUpdate) Mutation() *PostImageMutation {
	return piu.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (piu *PostImageUpdate) ClearPost() *PostImageUpdate {
	piu.mutation.ClearPost()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PostImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PostImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PostImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PostImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PostImageUpdate) check() error {
	if v, ok := piu.mutation.ImageURL(); ok {
		if err := postimage.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "PostImage.image_url": %w`, err)}
		}
	}
	if piu.mutation.PostCleared() && len(piu.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PostImage.post"`)
	}
	return nil
}

func (piu *PostImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(postimage.Table, postimage.Columns, sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ImageURL(); ok {
		_spec.SetField(postimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.CreatedAt(); ok {
		_spec.SetField(postimage.FieldCreatedAt, field.TypeTime, value)
	}
	if piu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PostImageUpdateOne is the builder for updating a single PostImage entity.
type PostImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostImageMutation
}

// SetPostID sets the "post_id" field.
func (piuo *PostImageUpdateOne) SetPostID(i int) *PostImageUpdateOne {
	piuo.mutation.SetPostID(i)
	return piuo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (piuo *PostImageUpdateOne) SetNillablePostID(i *int) *PostImageUpdateOne {
	if i != nil {
		piuo.SetPostID(*i)
	}
	return piuo
}

// SetImageURL sets the "image_url" field.
func (piuo *PostImageUpdateOne) SetImageURL(s string) *PostImageUpdateOne {
	piuo.mutation.SetImageURL(s)
	return piuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piuo *PostImageUpdateOne) SetNillableImageURL(s *string) *PostImageUpdateOne {
	if s != nil {
		piuo.SetImageURL(*s)
	}
	return piuo
}

// SetCreatedAt sets the "created_at" field.
func (piuo *PostImageUpdateOne) SetCreatedAt(t time.Time) *PostImageUpdateOne {
	piuo.mutation.SetCreatedAt(t)
	return piuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piuo *PostImageUpdateOne) SetNillableCreatedAt(t *time.Time) *PostImageUpdateOne {
	if t != nil {
		piuo.SetCreatedAt(*t)
	}
	return piuo
}

// SetPost sets the "post" edge to the Post entity.
func (piuo *PostImageUpdateOne) SetPost(p *Post) *PostImageUpdateOne {
	return piuo.SetPostID(p.ID)
}

// Mutation returns the PostImageMutation object of the builder.
func (piuo *PostImageUpdateOne) Mutation() *PostImageMutation {
	return piuo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (piuo *PostImageUpdateOne) ClearPost() *PostImageUpdateOne {
	piuo.mutation.ClearPost()
	return piuo
}

// Where appends a list predicates to the PostImageUpdate builder.
func (piuo *PostImageUpdateOne) Where(ps ...predicate.PostImage) *PostImageUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PostImageUpdateOne) Select(field string, fields ...string) *PostImageUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PostImage entity.
func (piuo *PostImageUpdateOne) Save(ctx context.Context) (*PostImage, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PostImageUpdateOne) SaveX(ctx context.Context) *PostImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PostImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PostImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PostImageUpdateOne) check() error {
	if v, ok := piuo.mutation.ImageURL(); ok {
		if err := postimage.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "PostImage.image_url": %w`, err)}
		}
	}
	if piuo.mutation.PostCleared() && len(piuo.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PostImage.post"`)
	}
	return nil
}

func (piuo *PostImageUpdateOne) sqlSave(ctx context.Context) (_node *PostImage, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postimage.Table, postimage.Columns, sqlgraph.NewFieldSpec(postimage.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postimage.FieldID)
		for _, f := range fields {
			if !postimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != postimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ImageURL(); ok {
		_spec.SetField(postimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CreatedAt(); ok {
		_spec.SetField(postimage.FieldCreatedAt, field.TypeTime, value)
	}
	if piuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PostImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
